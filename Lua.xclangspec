(

/****************************************************************************/
// MARK: Lua keywords
/****************************************************************************/
	{
		Identifier = "xcode.lang.lua.identifier";
		Syntax = {
			StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
			Chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_?";
			Words = (
				"_G",
				"_VERSION",
				"__add",
				"__call",
				"__concat",
				"__div",
				"__eq",
				"__gc",
				"__index",
				"__le",
				"__len",
				"__lt",
				"__metatable",
				"__mod",
				"__mode",
				"__mul",
				"__newindex",
				"__pow",
				"__sub",
				"__tostring",
				"__unm",
				"and",
				"assert",
				"break",
				"collectgarbage",
				"coroutine",
				"coroutine.create",
				"coroutine.resume",
				"coroutine.running",
				"coroutine.status",
				"coroutine.wrap",
				"coroutine.yield",
				"debug",
				"debug.debug",
				"debug.getfenv",
				"debug.gethook",
				"debug.getinfo",
				"debug.getlocal",
				"debug.getmetatable",
				"debug.getregistry",
				"debug.getupvalue",
				"debug.setfenv",
				"debug.sethook",
				"debug.setlocal",
				"debug.setmetatable",
				"debug.setupvalue",
				"debug.traceback",
				"do",
				"dofile",
				"else",
				"elseif",
				"end",
				"error",
				"false",
				"file:close",
				"file:flush",
				"file:lines",
				"file:read",
				"file:seek",
				"file:setvbuf",
				"file:write",
				"for",
				"function",
				"getfenv",
				"getmetatable",
				"if",
				"in",
				"io",
				"io.close",
				"io.flush",
				"io.input",
				"io.lines",
				"io.open",
				"io.output",
				"io.popen",
				"io.read",
				"io.tmpfile",
				"io.type",
				"io.write",
				"ipairs",
				"load",
				"loadfile",
				"loadstring",
				"local",
				"math",
				"math.abs",
				"math.acos",
				"math.asin",
				"math.atan",
				"math.atan2",
				"math.ceil",
				"math.cos",
				"math.cosh",
				"math.deg",
				"math.exp",
				"math.floor",
				"math.fmod",
				"math.frexp",
				"math.huge",
				"math.ldexp",
				"math.log",
				"math.log10",
				"math.max",
				"math.min",
				"math.modf",
				"math.pi",
				"math.pow",
				"math.rad",
				"math.random",
				"math.randomseed",
				"math.round",
				"math.sin",
				"math.sinh",
				"math.sqrt",
				"math.tan",
				"math.tanh",
				"next",
				"nil",
				"not",
				"or",
				"os.clock",
				"os.date",
				"os.difftime",
				"os.execute",
				"os.exit",
				"os.getenv",
				"os.remove",
				"os.rename",
				"os.setlocale",
				"os.time",
				"os.tmpname",
				"package",
				"package.cpath",
				"package.loaded",
				"package.loadlib",
				"package.path",
				"package.preload",
				"package.seeall",
				"pairs",
				"pcall",
				"print",
				"rawequal",
				"rawget",
				"rawset",
				"repeat",
				"require",
				"return",
				"select",
				"self",
				"setfenv",
				"setmetatable",
				"string",
				"string.byte",
				"string.char",
				"string.dump",
				"string.find",
				"string.format",
				"string.gmatch",
				"string.gsub",
				"string.len",
				"string.lower",
				"string.match",
				"string.rep",
				"string.reverse",
				"string.sub",
				"string.upper",
				"table",
				"table.concat",
				"table.copy",
				"table.indexOf",
				"table.insert",
				"table.maxn",
				"table.remove",
				"table.sort",
				"table.unpack",
				"then",
				"tonumber",
				"tostring",
				"true",
				"type",
				"unpack",
				"until",
				"while",
				"xpcall",
			);
			Type = "xcode.syntax.keyword";
			AltType = "xcode.syntax.identifier";
		};
	},
	{
		Identifier = "xcode.lang.lua.interestingOperators";
		Syntax = {
			Words = (
				"..",
				".",
				":",
				"...",
			);
			Type = "xcode.syntax.plain";
		};
	},
	{
		Identifier = "xcode.lang.lua";
		Description = "Lua Coloring";
		BasedOn = "xcode.lang.simpleColoring";
		IncludeInMenu = YES;
		Name = Lua;
		Syntax = {
			Tokenizer = "xcode.lang.lua.lexer.toplevel";
			IncludeRules = (
				"xcode.lang.lua.function",
				"xcode.lang.lua.block.if",
				"xcode.lang.lua.block.do",
				"xcode.lang.lua.block.repeat",
				"xcode.lang.lua.braceexpr",
				"xcode.lang.lua.bracketexpr",
				"xcode.lang.lua.parenexpr",
			);
			Type = "xcode.syntax.plain";
		};
	},
	{
		Identifier = "xcode.lang.lua.lexer";
		Syntax = {
			IncludeRules = (
				"xcode.lang.lua.comment",
				"xcode.lang.lua.comment.singleline",
				"xcode.lang.string",
				"xcode.lang.string.lua0",
				"xcode.lang.string.lua1",
				"xcode.lang.string.lua2",
				"xcode.lang.string.lua3",
				"xcode.lang.string.lua4",
				"xcode.lang.string.lua5",
				"xcode.lang.character",
				"xcode.lang.lua.identifier",
				"xcode.lang.number",
				"xcode.lang.lua.interestingOperators",
			);
		};
	},
	{
		Identifier = "xcode.lang.lua.lexer.toplevel";
		Syntax = {
			IncludeRules = (
				"xcode.lang.lua.comment",
				"xcode.lang.lua.comment.singleline",
				"xcode.lang.string",
				"xcode.lang.string.lua0",
				"xcode.lang.string.lua1",
				"xcode.lang.string.lua2",
				"xcode.lang.string.lua3",
				"xcode.lang.string.lua4",
				"xcode.lang.string.lua5",
				"xcode.lang.character",
				"xcode.lang.lua.local.declarator",
				"xcode.lang.lua.function.declarator",
				"xcode.lang.lua.identifier",
				"xcode.lang.number",
			);
		};
	},
	{
		Identifier = "xcode.lang.string.lua0";
		Syntax = {
			Start = "[[";
			End = "]]";
			Type = "xcode.syntax.string";
		};
	},
	{
		Identifier = "xcode.lang.string.lua1";
		Syntax = {
			Start = "[=[";
			End = "]=]";
			Type = "xcode.syntax.string";
		};
	},
	{
		Identifier = "xcode.lang.string.lua2";
		Syntax = {
			Start = "[==[";
			End = "]==]";
			Type = "xcode.syntax.string";
		};
	},
	{
		Identifier = "xcode.lang.string.lua3";
		Syntax = {
			Start = "[===[";
			End = "]===]";
			Type = "xcode.syntax.string";
		};
	},
	{
		Identifier = "xcode.lang.string.lua4";
		Syntax = {
			Start = "[====[";
			End = "]====]";
			Type = "xcode.syntax.string";
		};
	},
	{
		Identifier = "xcode.lang.string.lua5";
		Syntax = {
			Start = "[=====[";
			End = "]=====]";
			Type = "xcode.syntax.string";
		};
	},
	{
		Identifier = "xcode.lang.lua.local.declarator";
		Syntax = {
			Tokenizer = "xcode.lang.lua.lexer";
			Rules = (
				"local",
				"xcode.lang.lua.identifier",
			);
			Type = "xcode.syntax.name.partial";
		};
	},
	{
		Identifier = "xcode.lang.lua.function";
		Syntax = {
			Tokenizer = "xcode.lang.lua.lexer.toplevel";
			Start = "xcode.lang.lua.function.declarator";
			End = "end";
			Foldable = YES;
			Recursive = YES;
			IncludeRules = (
				"xcode.lang.lua.block.if",
				"xcode.lang.lua.block.do",
				"xcode.lang.lua.block.repeat",
				"xcode.lang.lua.braceexpr",
				"xcode.lang.lua.bracketexpr",
				"xcode.lang.lua.parenexpr",
			);
			Type = "xcode.syntax.definition.function";
		};
	},
	{
		Identifier = "xcode.lang.lua.function.declarator";
		Syntax = {
			Tokenizer = "xcode.lang.lua.lexer";
			Rules = (
				"function",
				"xcode.lang.lua.function.name?",
				"xcode.lang.lua.parenexpr",
			);
		};
	},
	{
		Identifier = "xcode.lang.lua.function.name";
		Syntax = {
			Tokenizer = "xcode.lang.lua.lexer";
			Rules = (
				"xcode.lang.lua.identifier",
				"xcode.lang.lua.function.name.more?",
			);
			Type = "xcode.syntax.name.partial";
		};
	},
	{
		Identifier = "xcode.lang.lua.function.name.more";
		Syntax = {
			Tokenizer = "xcode.lang.lua.lexer";
			Rules = (
				".",
				":",
				"xcode.lang.lua.identifier",
			);
			Type = "xcode.syntax.name.partial";
		};
	},
	{
		Identifier = "xcode.lang.lua.block.if";
		Syntax = {
			Tokenizer = "xcode.lang.lua.lexer";
			Start = "if";
			End = "end";
			Foldable = YES;
			Recursive = YES;
			IncludeRules = (
				"xcode.lang.lua.block.do",
				"xcode.lang.lua.block.repeat",
				"xcode.lang.lua.braceexpr",
				"xcode.lang.lua.bracketexpr",
				"xcode.lang.lua.parenexpr",
			);
		};
	},
	{
		Identifier = "xcode.lang.lua.block.do";
		Syntax = {
			Tokenizer = "xcode.lang.lua.lexer";
			Start = "do";
			End = "end";
			Foldable = YES;
			Recursive = YES;
			IncludeRules = (
				"xcode.lang.lua.block.if",
				"xcode.lang.lua.block.repeat",
				"xcode.lang.lua.braceexpr",
				"xcode.lang.lua.bracketexpr",
				"xcode.lang.lua.parenexpr",
			);
		};
	},
	{
		Identifier = "xcode.lang.lua.block.repeat";
		Syntax = {
			Tokenizer = "xcode.lang.lua.lexer";
			Start = "repeat";
			End = "until";
			Foldable = YES;
			Recursive = YES;
			StartAtBOL = YES;
			IncludeRules = (
				"xcode.lang.lua.block.if",
				"xcode.lang.lua.block.do",
				"xcode.lang.lua.braceexpr",
				"xcode.lang.lua.bracketexpr",
				"xcode.lang.lua.parenexpr",
			);
		};
	},
	{
		Identifier = "xcode.lang.lua.braceexpr";
		Syntax = {
			Tokenizer = "xcode.lang.lua.lexer";
			Start = "{";
			End = "}";
			Foldable = YES;
			Recursive = YES;
			IncludeRules = (
				"xcode.lang.lua.bracketexpr",
				"xcode.lang.lua.parenexpr",
			);
		};
	},
	{
		Identifier = "xcode.lang.lua.parenexpr";
		Syntax = {
			Tokenizer = "xcode.lang.lua.lexer";
			Start = "(";
			End = ")";
			Recursive = YES;
			IncludeRules = (
				"xcode.lang.lua.braceexpr",
				"xcode.lang.lua.bracketexpr",
			);
		};
	},
	{
		Identifier = "xcode.lang.lua.bracketexpr";
		Syntax = {
			Tokenizer = "xcode.lang.lua.lexer";
			Start = "[";
			End = "]";
			Recursive = YES;
			IncludeRules = (
				"xcode.lang.lua.braceexpr",
				"xcode.lang.lua.parenexpr",
			);
		};
	},
	{
		Identifier = "xcode.lang.lua.comment";
		Syntax = {
			Start = "--[[";
			End = "]]";
			Foldable = YES;
			IncludeRules = (
				"xcode.lang.url",
				"xcode.lang.url.mail",
				"xcode.lang.comment.mark",
			);
			Type = "xcode.syntax.comment";
		};
	},
	{
		Identifier = "xcode.lang.lua.comment.singleline";
		Syntax = {
			Start = "--";
			End = "\n";
			IncludeRules = (
				"xcode.lang.url",
				"xcode.lang.url.mail",
				"xcode.lang.comment.mark",
			);
			Type = "xcode.syntax.comment";
		};
	},
)

